#!/bin/bash
#PBS -l nodes=1:ppn=8,walltime=9:00:00,vmem=50gb
#PBS -N qsiprep

set -x
set -e

export FREESURFER_LICENSE="hayashis@iu.edu 29511 *CPmh9xvKQKHE FSg0ijTusqaQc"
echo $FREESURFER_LICENSE > license.txt

bl2bids

WORKDIRNAME=qsipworkdir
outdir=output

resolution=$(jq -r .output_resolution config.json) 
space=$(jq -r .output_space config.json) 
#sub=$(jq -r '._inputs[] | select(.id == "t1w") | .meta.subject' config.json)
sub=$(jq -r '._inputs[0].meta.subject' config.json)
dwi=$(jq -r .dwi config.json)
skipbidsvalidation=$(jq -r .skipbidsvalidation config.json)
denoise_method=$(jq -r .denoise_method config.json)
distortion_group_merge=$(jq -r .distortion_group_merge config.json)
unringing_method=$(jq -r .unringing_method config.json)
hmc_transform=$(jq -r .hmc_transform config.json)
infant=$(jq -r .infant config.json)

optional=""

if [[ $dwi == *","* ]]; then 
	echo "Multi dwi input found. Distortion group merge option: ${distortion_group_merge}"; 
	optional="$optional --distortion-group-merge ${distortion_group_merge}";	
fi

# boolean options
[ $skipbidsvalidation == "true" ] && optional="$optional --skip-bids-validation"
[ $infant == "true" ] && optional="$optional --infant"

# remove if stuff already exists
rm -rf $WORKDIRNAME && mkdir -p $WORKDIRNAME
rm -rf $outdir && mkdir -p $outdir

# set FreeSurfer
[ -z "$FREESURFER_LICENSE" ] && echo "Please set FREESURFER_LICENSE in .bashrc" && exit 1;

time singularity exec -e \
    docker://pennbbl/qsiprep:0.13.0RC1 \
    /usr/local/miniconda/bin/qsiprep \
    --fs-license-file license.txt \
    --output-resolution $resolution \
    --output-space $space \
    --denoise-method $denoise_method \
    --unringing-method $unringing_method \
    --hmc-transform $hmc_transform \
    --work-dir $WORKDIRNAME \
    bids $outdir participant \
    $optional
    
#organize output
mkdir -p output_anat_preproc
mkdir -p output_dseg
mkdir -p output_brainmask

SRCDIR=$outdir/qsiprep/sub-${sub}/anat

if [ $space == "T1w" ]; then
    cp $SRCDIR/sub-${sub}_desc-preproc_T1w.nii.gz output_anat_preproc/t1.nii.gz;
    cp $SRCDIR/sub-${sub}_dseg.nii.gz output_dseg/parc.nii.gz;
    cp $SRCDIR/sub-${sub}_desc-brain_mask.nii.gz output_brainmask/mask.nii.gz;
elif [ $space == "template" ]; then
    cp $SRCDIR/sub-${sub}_space-MNI152NLin2009cAsym_desc-preproc_T1w.nii.gz output_anat_preproc/t1.nii.gz;     
    cp $SRCDIR/sub-${sub}_space-MNI152NLin2009cAsym_dseg.nii.gz output_dseg/parc.nii.gz;
    cp $SRCDIR/sub-${sub}_space-MNI152NLin2009cAsym_desc-brain_mask.nii.gz output_brainmask/mask.nii.gz;
fi

mkdir -p output_dwi
cp $outdir/qsiprep/sub-*/dwi/sub-*_space-T1w_desc-preproc_dwi.nii.gz output_dwi/dwi.nii.gz
cp $outdir/qsiprep/sub-*/dwi/sub-*_space-T1w_desc-preproc_dwi.bvec output_dwi/dwi.bvecs
cp $outdir/qsiprep/sub-*/dwi/sub-*_space-T1w_desc-preproc_dwi.bval output_dwi/dwi.bvals

mkdir -p output_figures/images
cp $outdir/qsiprep/sub-*/figures/* output_figures/images
cp figures.images.json output_figures/images.json #TODO: rewrite with right content

#reportlets 
mkdir -p output_report
for html in $(cd $WORKDIRNAME/reportlets && find -name "*.html"); do
    mkdir -p output_report/$(dirname $html)
    cp $WORKDIRNAME/reportlets/$html output_report/$html
done

for dir in $(cd $WORKDIRNAME/reportlets && find ./ -name figures); do
    mkdir -p output_report/$(dirname $dir)
    cp -r reportlets/$dir output_report/$(dirname $dir)
done

#rename the parent directory to confirm to brainlife html output
mv output_report/qsiprep output_report/html 

#store PSD plot on product.json
cat << EOF > product.json
{
    "brainlife": [
        { 
            "type": "images", 
	        "name": "brainmask",
            "base64": "$(base64 -w 0 output_figures/images/sub-${sub}_seg_brainmask.svg)"
        },
        { 
            "type": "images", 
	        "name": "coregistration",
            "base64": "$(base64 -w 0 output_figures/images/sub-${sub}_coreg.svg)"
        }
    ]
}
EOF

echo "all done!" 
